
services:
  db:
    image: postgres:15  # postgres image
    environment:
      POSTGRES_DB: mydatabase          # Name of the database to be created
      POSTGRES_USER: user               # Username for the database
      POSTGRES_PASSWORD: password        # Password for the user
    volumes:
      - pgdata:/var/lib/postgresql/data  # Volume for persistent data storage; 
      #this will store relevant data after the lifespan of the container
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U user"] #command to check is postgres is ready
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5

  backend:
    build: 
      context: ./backend
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/app
    environment:
      DATABASE_URL: postgres://user:password@db/mydatabase  # Connection URL for Django
    ports:
      - "8000:8000"
    depends_on:
      - db
        # condition: service_healthy #this makes sure db is ready before starting backend

  frontend:
    build:
      context: ./frontend
    command: npm start
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    networks:
      - app-network

volumes:
  pgdata:  # Named volume for PostgreSQL data

networks:
  app-network: #apparently docker creates a default network, but one can be manually defined
